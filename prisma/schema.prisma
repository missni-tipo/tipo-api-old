// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  full_name            String
  gender               String    @default("m")
  email                String    @unique
  phone_number         String    @unique
  password_hash        String?
  pin                  String?
  status               Status    @default(active)
  picture              String?
  birthdate            DateTime?
  domicile             String?
  profile_completed_at DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  accounts        OAuthAccount[]
  sessions        Session[]
  verification    VerificationToken[]
  roles           UserRole[]
  transactions    CoinTransaction[]
  user_coins      UserCoin[]
  tours           Tour[]
  tour_reviews    TourReview[]
  vouchers        Voucher[]
  user_promotions UserPromotion[]
  user_vouchers   UserVoucher[]
  coin_topups     CoinTopup[]
  coin_reset_rules CoinResetRule[]
  audit_logs      AuditLog[]
  
  admin_resets     CoinReset[] @relation(name: "AdminResets")
  customer_resets  CoinReset[] @relation(name: "CustomerResets")

  @@map("users")
}

model OAuthAccount {
  id            String   @id @default(uuid())
  user_id       String
  provider      String
  provider_id   String   @unique
  refresh_token String?
  access_token  String?
  expires_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("oauth_accounts")
}

model Session {
  id            String   @id @default(uuid())
  user_id       String
  refresh_token String   @unique
  user_agent    String
  ip_address    String
  expires_at    DateTime
  created_at    DateTime  @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(uuid())
  user_id    String   @unique
  email      String
  token      String   @unique
  type       String
  expires    DateTime
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("verification_tokens")
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  user_roles  UserRole[]

  @@map("roles")
}

model UserRole {
  id         String   @id @default(uuid())
  user_id    String
  role_id    String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  role Role @relation(fields: [role_id], references: [id])

  @@map("user_roles")
}

model Tour {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  phone_number String   @unique
  description  String?
  location     String
  latitude     Float?
  longitude    Float?
  category     String   @default("hiburan")
  status       ProcessStatus @default(approved)
  rating       Float    @default(0.0)
  review_count Int      @default(0)
  picture      String[]
  created_by   String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  facilities   Facility[]
  employees    Employee[]
  reviews      TourReview[]
  promotions   Promotion[]

  created_by_user User @relation(fields: [created_by], references: [id])

  @@map("tours")
}

model TourReview {
  id         String   @id @default(uuid())
  tour_id    String
  user_id    String
  review     String?
  rate       Int      @default(0)
  created_at DateTime @default(now())

  tour Tour @relation(fields: [tour_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@map("tour_reviews")
}

model FacilityType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  facility Facility[]

  @@map("facilitytypes")
}

model Facility {
  id               String   @id @default(uuid())
  tour_id          String
  facility_type_id Int
  name             String
  barcode          String   @unique
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  facilitypricing  FacilityPricing[]
  facilityemployee FacilityEmployee[]
  voucher          Voucher[]

  tour         Tour         @relation(fields: [tour_id], references: [id])
  facilityType FacilityType @relation(fields: [facility_type_id], references: [id])

  @@map("facilities")
}

model FacilityPricing {
  id          String    @id @default(uuid())
  facility_id String
  price       Int
  currency    String    @default("IDR")
  start_date  DateTime
  end_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())

  facility Facility @relation(fields: [facility_id], references: [id])

  @@map("facilitypricings")
}

model Employee {
  id         String   @id @default(uuid())
  tour_id    String
  full_name  String
  phone      String   @unique
  status     Status   @default(active)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  facilityemployee FacilityEmployee[]

  tour Tour @relation(fields: [tour_id], references: [id])

  @@map("employees")
}

model FacilityEmployee {
  id          String    @id @default(uuid())
  facility_id String
  employee_id String
  position    String
  start_date  DateTime
  end_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())

  facility Facility @relation(fields: [facility_id], references: [id])
  employee Employee @relation(fields: [employee_id], references: [id])

  @@map("facilityemployees")
}

model Promotion {
  id             String       @id @default(uuid())
  tour_id        String?
  name           String
  description    String?
  discount_type  DiscountType
  discount_value Float
  max_discount   Int?
  min_spend      Int?
  quota          Int          @default(0)
  used_quota     Int          @default(0)
  start_date     DateTime
  end_date       DateTime
  is_active      Boolean      @default(true)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @default(now())

  userpromotion UserPromotion[]

  tour Tour? @relation(fields: [tour_id], references: [id])

  @@map("promotions")
}

model Voucher {
  id             String       @id @default(uuid())
  facility_id    String?
  code           String       @unique
  name           String
  description    String?
  discount_type  DiscountType
  discount_value Float
  max_discount   Int?
  min_spend      Int?
  quota          Int          @default(0)
  used_quota     Int          @default(0)
  user_id        String?
  start_date     DateTime
  end_date       DateTime
  is_active      Boolean      @default(true)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @default(now())

  uservoucher UserVoucher[]

  facility Facility? @relation(fields: [facility_id], references: [id])
  user     User?     @relation(fields: [user_id], references: [id])

  @@map("vouchers")
}

model UserPromotion {
  id           String    @id @default(uuid())
  user_id      String
  promotion_id String
  is_used      Boolean   @default(false)
  used_at      DateTime?
  created_at   DateTime  @default(now())

  user      User      @relation(fields: [user_id], references: [id])
  promotion Promotion @relation(fields: [promotion_id], references: [id])

  @@map("userpromotions")
}

model UserVoucher {
  id         String    @id @default(uuid())
  user_id    String
  voucher_id String
  is_used    Boolean   @default(false)
  used_at    DateTime?
  created_at DateTime  @default(now())

  user    User    @relation(fields: [user_id], references: [id])
  voucher Voucher @relation(fields: [voucher_id], references: [id])

  @@map("uservouchers")
}

model CoinSetting {
  id             String   @id @default(uuid())
  price_per_coin Float
  min_purchase   Int      @default(10)
  max_purchase   Int      @default(10000)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  @@map("coinsettings")
}

model CoinTopup {
  id             String   @id @default(uuid())
  user_id        String
  payment_ref    String
  amount         Int
  price_total    Float
  payment_status ProcessStatus
  payment_method String
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("cointopups")
}

model UserCoin {
  id            String    @id @default(uuid())
  user_id       String    @unique
  balance       Int       @default(0)
  last_reset_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("usercoins")
}

model CoinTransaction {
  id               String          @id @default(uuid())
  user_id          String
  transaction_type TransactionType
  amount           Int
  price_total      Decimal?
  related_id       String?

  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("cointransactions")
}

model CoinReset {
  id               String   @id @default(uuid())
  admin_id         String
  user_id          String
  previous_balance Int
  reset_reason     String?
  reset_at         DateTime @default(now())

  admin User @relation(name: "AdminResets", fields: [admin_id], references: [id])  
  user  User @relation(name: "CustomerResets", fields: [user_id], references: [id])


  @@map("coinresets")
}

model CoinResetRule {
  id              String         @id @default(uuid())
  reset_enabled   Boolean        @default(false)
  reset_date      DateTime?
  reset_time      DateTime?
  reset_frequency ResetFrequency
  reset_admin_id  String

  last_updated_at DateTime @updatedAt

  admin User @relation(fields: [reset_admin_id], references: [id])

  @@map("coinresetrules")
}

model AuditLog {
  id        String @id @default(uuid())
  user_id   String
  action    String
  entity    String
  entity_id String

  timestamp DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("auditlogs")
}

enum DiscountType {
  percentage
  fixed
}

enum ProcessStatus {
  pending
  success
  failed
  approved
  rejected
}

enum Status {
  inactive
  active
  suspended
}

enum TransactionType {
  topup
  purchase
  spend
  refund
  reset
}

enum ResetFrequency {
  monthly
  yearly
  custom
}